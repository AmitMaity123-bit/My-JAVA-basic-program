import java.util.Scanner;

class Node {
    int data;
    Node next;

    Node(int value) {
        data = value;
        next = null;
    }
}

class LinkedList {
    Node head;

    // 1. Insert at Beginning
    void insertAtBeginning(int value) {
        Node newNode = new Node(value);
        newNode.next = head;
        head = newNode;
        System.out.println(value + " inserted at beginning.");
    }

    // 2. Insert at End
    void insertAtEnd(int value) {
        Node newNode = new Node(value);
        if (head == null) {
            head = newNode;
            System.out.println(value + " inserted as the first node.");
            return;
        }
        Node temp = head;
        while (temp.next != null) {
            temp = temp.next;
        }
        temp.next = newNode;
        System.out.println(value + " inserted at end.");
    }

    // 3. Insert at Any Position (1-based index)
    void insertAtPosition(int value, int pos) {
        Node newNode = new Node(value);

        if (pos <= 0) {
            System.out.println("Invalid position!");
            return;
        }

        if (pos == 1) {
            insertAtBeginning(value);
            return;
        }

        Node temp = head;
        for (int i = 1; temp != null && i < pos - 1; i++) {
            temp = temp.next;
        }

        if (temp == null) {
            System.out.println("Position out of range.");
            return;
        }

        newNode.next = temp.next;
        temp.next = newNode;
        System.out.println(value + " inserted at position " + pos);
    }

    // 4. Delete at Beginning
    void deleteAtBeginning() {
        if (head == null) {
            System.out.println("List is empty.");
            return;
        }
        System.out.println("Deleted node with value " + head.data);
        head = head.next;
    }

    // 5. Delete at End
    void deleteAtEnd() {
        if (head == null) {
            System.out.println("List is empty.");
            return;
        }
        if (head.next == null) {
            System.out.println("Deleted node with value " + head.data);
            head = null;
            return;
        }
        Node temp = head;
        while (temp.next.next != null) {
            temp = temp.next;
        }
        System.out.println("Deleted node with value " + temp.next.data);
        temp.next = null;
    }

    // 6. Delete at Any Position (1-based index)
    void deleteAtPosition(int pos) {
        if (pos <= 0 || head == null) {
            System.out.println("Invalid position or empty list.");
            return;
        }

        if (pos == 1) {
            System.out.println("Deleted node with value " + head.data);
            head = head.next;
            return;
        }

        Node temp = head;
        for (int i = 1; temp != null && i < pos - 1; i++) {
            temp = temp.next;
        }

        if (temp == null || temp.next == null) {
            System.out.println("Position out of range.");
            return;
        }

        System.out.println("Deleted node with value " + temp.next.data);
        temp.next = temp.next.next;
    }

    // 7. Delete a Node by Value
    void deleteByValue(int value) {
        if (head == null) {
            System.out.println("List is empty.");
            return;
        }

        if (head.data == value) {
            head = head.next;
            System.out.println("Deleted node with value " + value);
            return;
        }

        Node temp = head;
        while (temp.next != null && temp.next.data != value) {
            temp = temp.next;
        }

        if (temp.next == null) {
            System.out.println("Value " + value + " not found in list.");
        } else {
            System.out.println("Deleted node with value " + value);
            temp.next = temp.next.next;
        }
    }

    // 8. Search for a Value with position
    int search(int value) {
    Node temp = head;
    int position = 1;
    while (temp != null) {
        if (temp.data == value) {
            return position;  // return position if found
        }
        temp = temp.next;
        position++;
    }
    return -1; 
}


    // 9. Display the List
    void display() {
        if (head == null) {
            System.out.println("List is empty.");
            return;
        }
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + " -----> ");
            temp = temp.next;
        }
        System.out.println("NULL");
    }
}

public class LinkedListFull {
    public static void main(String[] args) {
        Scanner amit = new Scanner(System.in);
        LinkedList list = new LinkedList();

        while (true) {
            System.out.println("\n--- Linked List Menu ---");
            System.out.println("1. Insert at Beginning");
            System.out.println("2. Insert at End");
            System.out.println("3. Insert at Any Position");
            System.out.println("4. Delete at Beginning");
            System.out.println("5. Delete at End");
            System.out.println("6. Delete at Any Position");
            System.out.println("7. Delete by Value");
            System.out.println("8. Search for a Value");
            System.out.println("9. Display the List");
            System.out.println("10. Exit");
            System.out.print("Enter your choice: ");
            int choice = amit.nextInt();

            switch (choice) {
                case 1:
                    System.out.print("Enter value: ");
                    list.insertAtBeginning(amit.nextInt());
                    break;
                case 2:
                    System.out.print("Enter value: ");
                    list.insertAtEnd(amit.nextInt());
                    break;
                case 3:
                    System.out.print("Enter value: ");
                    int val = amit.nextInt();
                    System.out.print("Enter position: ");
                    int pos = amit.nextInt();
                    list.insertAtPosition(val, pos);
                    break;
                case 4:
                    list.deleteAtBeginning();
                    break;
                case 5:
                    list.deleteAtEnd();
                    break;
                case 6:
                    System.out.print("Enter position: ");
                    list.deleteAtPosition(amit.nextInt());
                    break;
                case 7:
                    System.out.print("Enter value to delete: ");
                    list.deleteByValue(amit.nextInt());
                    break;
                case 8:
                    System.out.print("Enter value to search: ");
                    int searchVal = amit.nextInt();
                    int posFound = list.search(searchVal);
                    if (posFound != -1) {
                        System.out.println("The value " + searchVal + " is found in the list at position " + posFound + ".");
                    } else {
                        System.out.println("The value " + searchVal + " is not found in the list.");
                    }
                    break;

                case 9:
                    list.display();
                    break;
                case 10:
                    System.out.println("Exiting...");
                    amit.close();
                    return;
                default:
                    System.out.println("Invalid choice! Try again.");
            }
        }
    }
}
